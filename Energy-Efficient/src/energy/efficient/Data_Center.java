/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package energy.efficient;


import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import org.cloudbus.cloudsim.Datacenter;
import org.cloudbus.cloudsim.DatacenterBroker;
import org.cloudbus.cloudsim.DatacenterCharacteristics;
import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.VmAllocationPolicySimple;
import org.cloudbus.cloudsim.VmSchedulerSpaceShared;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;

/**
 *
 * @author EGC
 */
public class Data_Center extends javax.swing.JFrame {

    /** Creates new form Data */
    public static Datacenter[] dataCenter;
    public static int nofDatacenter,nofBrokers;
    String str;
    public static String dcName,bName;
    public static ArrayList details =new ArrayList();
  
    public static DatacenterBroker[] bId;
    public static ArrayList bid = new ArrayList();
    public static ArrayList did = new ArrayList();
    public static ArrayList hid = new ArrayList();
    public static Host h;
    public static List<Host> hostList = new ArrayList<Host>();
    public static ArrayList k=new ArrayList();
    public static ArrayList hl=new ArrayList();
   public static ArrayList  hla=new ArrayList();
   public static double time_zone; 
    public Data_Center() 
    {
        initComponents();
         CloudSim.init(5, Calendar.getInstance(), false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 1, 14)); // NOI18N
        jLabel1.setText("Energy-Efficient Many-Objective Virtual Machine Placement Optimization in a Cloud Computing Environment");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 10, 750, 50);

        jScrollPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Data_Center", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 14))); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(100, 210, 570, 280);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Palatino Linotype", 1, 14))); // NOI18N
        jPanel2.setToolTipText("Config");
        jPanel2.setLayout(null);

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Palatino Linotype", 0, 14)); // NOI18N
        jPanel2.add(jTextField1);
        jTextField1.setBounds(142, 22, 186, 25);

        jLabel2.setFont(new java.awt.Font("Palatino Linotype", 1, 14)); // NOI18N
        jLabel2.setText("Data Center");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(24, 23, 100, 25);

        jButton2.setFont(new java.awt.Font("Palatino Linotype", 1, 14)); // NOI18N
        jButton2.setText("Datacenter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);
        jButton2.setBounds(360, 20, 120, 30);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(160, 100, 520, 70);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/NextButton2.png"))); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel3);
        jLabel3.setBounds(680, 390, 100, 110);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ezgif.png"))); // NOI18N
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 90, 150, 110);

        jPanel3.setBackground(new java.awt.Color(240, 157, 234));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 790, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(0, 0, 790, 80);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try

        {
            str= JOptionPane.showInputDialog(this,"Enter Number Of Data Centers");
            nofDatacenter=Integer.parseInt(str);

            jTextField1.setText(nofDatacenter+" ");
            dataCenter=new Datacenter[nofDatacenter];

            //        System.out.println("dcname"+"\t"+"No of machines"+"\t"+"host id"+" \t"+"no. pes"+"\t"+"ram\t"+"\t"+"bw\n\n");

            for(int i=0;i<nofDatacenter;i++)
            {

                dcName="Datacenter_"+i;
                dataCenter[i]=createDatacenter("Datacenter_"+i);
                did.add("Datacenter_"+i);

            }
            JOptionPane.showMessageDialog(null,nofDatacenter+" Data centers created");
            jTextArea1.append("DC_Name"+"\t"+"No_of_m"+"\t"+"Host id"+" \t"+"No. PEs"+"\t"+"RAM"+"\t"+"Band_W\n\n");
            jTextArea1.append("=======================================================================================\n\n");
            for(int i=0;i<details.size();i++)
            {

                hid.add(details.get(i).toString());

                jTextArea1.append(details.get(i).toString()+"\n");
            }
            //        for(int m=0;m<k.size();m++)
            //        {
                //            System.out.println(k.get(m).toString()+"\n");
                //        }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Please Enter only Number");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        new Broker_Center().setVisible(true);
    }//GEN-LAST:event_jLabel3MouseClicked

      private static Datacenter createDatacenter(String name){
		
			
		List<Pe> peList = new ArrayList<Pe>();
                //NO. of pes
                Random r=new Random();
                int nMip,nPe;                
                int mips;
                do
                {
                    nPe=r.nextInt(5);
                }
                while(nPe<1);
                
                for(int i=0;i<nPe;i++)
                {
                    do
                    {
                        
                        nMip=r.nextInt(2000);
                    }
                    while(nMip<300);
                    mips=nMip;
                    peList.add(new Pe(i, new PeProvisionerSimple(mips)));
                }		
                //No. of machines
                int nMachines;
                do
                {
                    nMachines=r.nextInt(5);
                }
                   while(nMachines<2);
                int[] rams={4096,4096};
                int[] bws={25000,25000,250000,25000};
                int nRam,hostId,ram,bw,nBw;
                long storage;
                double hl1,allhl=0;
                for(int i=0;i<nMachines;i++)
                {
//                    nRam=r.nextInt(2);
//                    nBw=r.nextInt(4);                    
//                    hostId=i;
//                    ram=40960;
////                    ram = rams[nRam]; //host memory (MB)
//                    storage = 409600; //host storage
////                    bw = bws[nBw];
                      nRam=r.nextInt(rams.length);
                    nBw=r.nextInt(4);                    
                    hostId=i;
                    ram = rams[nRam]; 
                    storage = 1000000; 
                    bw = bws[nBw];
//                    bw=512;
                    details.add(dcName+"\t"+nMachines+"\t"+hostId+"\t"+nPe+"\t"+ram+"\t"+bw+"\n");
//                    System.out.println(dcName+"\t"+nMachines+"\t\t"+hostId+"\t\t"+nPe+"\t\t"+ram+"\t"+bw+"\n");
   
                    h=new Host(hostId,
    				new RamProvisionerSimple(ram),
    				new BwProvisionerSimple(bw),
    				storage,
    				peList,
    				new VmSchedulerSpaceShared(peList));
                    hostList.add(h);
                   System.out.println(h.getAvailableMips());
                           k.add(h.getId()+"\t"+h.getRam()+"\t"+h.getStorage()+"\t"+h.getBw()+"\t"+h.getNumberOfPes());
                            hl1=h.getBw()+h.getRam()+h.getAvailableMips();
                  allhl+=hl1;
                  hl.add(h.getId()+"\t"+allhl);
                  hla.add(h.getId());
                  
                    }	
		 
		String arch = "x86";      // system architecture
		String os = "Linux";          // operating system
		String vmm = "Xen";
	      double time_zone = 10.0;         // time zone this resource located
		double cost = 3.0;              // the cost of using processing in this resource
		double costPerMem = 0.05;		// the cost of using memory in this resource
		double costPerStorage = 0.1;	// the cost of using storage in this resource
		double costPerBw = 0.1;			// the cost of using bw in this resource
		LinkedList<Storage> storageList = new LinkedList<Storage>();	//we are not adding SAN devices by now

	       DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
	                arch, os, vmm, hostList, time_zone, cost, costPerMem, costPerStorage, costPerBw);	
		Datacenter datacenter = null;
		try {
			datacenter = new Datacenter(name, characteristics, new VmAllocationPolicySimple(hostList), storageList, 0);
		} catch (Exception e) {
			e.printStackTrace();
		}
           
		return datacenter;
	}
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Data_Center.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Data_Center.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Data_Center.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Data_Center.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Data_Center().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
